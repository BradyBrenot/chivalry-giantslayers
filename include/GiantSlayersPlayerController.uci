var array<float> SizeMessageThresholds;

//Welcome users to the game
reliable client function ShowDefaultGameHeader()
{
	if (AOCGRI(Worldinfo.GRI) == none)
	{
		SetTimer(0.1f, false, 'ShowDefaultGameHeader');
		return;
	}

	super.ShowDefaultGameHeader();
	//Localize() will find the "Welcome" key in the "ChatMessages" section of "GiantSlayers.XXX" where XXX is replaced with the user's language's name (English is "INT")
	`if(`isdefined(GS_FFA))
		//ReceiveChatMessage("",Localize("ChatMessages", "ChatWelcomeFFA", "GiantSlayers"),EFAC_ALL,false,false,,false);
		//Localization is broken at the moment...
		ReceiveChatMessage("","Welcome to Giant Slayers FFA! The goal: grow as big as you possibly can. You start out smaller than normal, but every kills makes you grow a bit. There's no limit to how large you can get!",EFAC_ALL,false,false,,false);
	`else
		//ReceiveChatMessage("",Localize("ChatMessages", "ChatWelcomeOther", "GiantSlayers"),EFAC_ALL,false,false,,false);
		//Localization is broken at the moment...
		ReceiveChatMessage("","Welcome to Giant Slayers! You start out smaller than normal, but every kills makes you grow a bit. There's no limit to how large you can get!",EFAC_ALL,false,false,,false);
	`endif
	SetTimer(3.0f, false, 'ShowGiantSlayersHeader');
}

simulated function ShowGiantSlayersHeader()
{
	//ReceiveLocalizedHeaderText(Localize("ChatMessages", "Welcome", "GiantSlayers"),5.0f);
	//Localization is broken at the moment...
	ReceiveLocalizedHeaderText("Welcome to Giant Slayers!",5.0f);
}

simulated function NotifyChangedScale()
{
	local `{GAMEMODE}Pawn MyPawn;
	local string Message;
	local int ThresholdIndex, i;
	
	MyPawn = `{GAMEMODE}Pawn(Pawn);
	
	if(MyPawn.GiantScale <= MyPawn.default.GiantScale)
	{
		return;
	}
	
	ThresholdIndex = 0;
	for(i = 0; i < SizeMessageThresholds.length; ++i)
	{
		if(MyPawn.GiantScale >= SizeMessageThresholds[i])
		{
			ThresholdIndex = i;
		}
		else
		{
			break;
		}
	}

	//We'll take the localized string, then replace the first occurence of "{SCALE}" with the actual scale
	//handling variables this way lets different languages move them around to where they make the most sense
	//Message = Localize("ChatMessages", "SizeMessage"$ThresholdIndex, "GiantSlayers");
	
	//Localization is broken at the moment, so this quick horror switch will replace it...
	switch(ThresholdIndex)
	{
		case 0:
			Message = "You're tiny ({SCALE})";
			break;
		case 1: 
			Message = "You're just a little small ({SCALE})";
			break;
		case 2:
			Message = "You're about average ({SCALE})";
			break;
		case 3:
			Message = "You're a bit bigger than normal ({SCALE})";
			break;
		case 4:
			Message = "You're intimidatingly big ({SCALE})";
			break;
		case 5:
			Message = "You're twice Malric's size, it's starting to get to your head ({SCALE})";
			break;
		case 6:
			Message = "You're more than thrice any normal soldier's height ({SCALE})";
			break;
		case 7:
			Message = "You're a certified giant ({SCALE})";
			break;
		case 8:
			Message = "You're enormous ({SCALE})";
			break;
		case 9:
			Message = "You're a titan ({SCALE})";
			break;
		case 10:
			Message = "The sky is getting close ({SCALE})";
			break;
		case 11:
			Message = "You are the sky ({SCALE})";
			break;
		case 12:
			Message = "No one can touch me ({SCALE})";
			break;
		case 13:
			Message = "Puny humans will never understand my existence ({SCALE})";
			break;
		case 14:
		default:
			Message = "Fee-fi-fo-fum, I smell the blood of soon dead men ({SCALE})";
			break;
	}
	
	Message = Repl(Message, "{SCALE}", Round(MyPawn.GiantScale * 100.0)$"%");
	
	ReceiveChatMessage("",Message,EFAC_ALL,false,false,,false);
}

exec function GS_Scale(float NewScale)
{
	if(Worldinfo.NetMode == NM_Standalone)
	{
		`{GAMEMODE}Pawn(Pawn).SetGiantScale(NewScale);
	}
}

exec function GS_TestScaleSoundA(float Scale)
{
	if(Worldinfo.NetMode == NM_Standalone)
	{
		`{GAMEMODE}Pawn(Pawn).TestScaleSoundA(Scale);
	}
}

exec function GS_TestScaleSoundB(float Scale)
{
	if(Worldinfo.NetMode == NM_Standalone)
	{
		`{GAMEMODE}Pawn(Pawn).TestScaleSoundB(Scale);
	}
}

defaultproperties
{
	SizeMessageThresholds(0) = 0;
	SizeMessageThresholds(1) = 0.9;
	SizeMessageThresholds(2) = 1.0;
	SizeMessageThresholds(3) = 1.15;
	SizeMessageThresholds(4) = 1.5;
	SizeMessageThresholds(5) = 2.0;
	SizeMessageThresholds(6) = 3.0;
	SizeMessageThresholds(7) = 5.0;
	SizeMessageThresholds(8) = 7.0;
	SizeMessageThresholds(9) = 10.0;
	SizeMessageThresholds(10) = 15.0;
	SizeMessageThresholds(11) = 20.0;
	SizeMessageThresholds(12) = 30.0;
	SizeMessageThresholds(13) = 40.0;
	SizeMessageThresholds(14) = 50.0;
}