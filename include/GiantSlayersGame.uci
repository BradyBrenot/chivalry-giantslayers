//SetGameType returns which game mode should be used for which map prefix
//You can do whatever you want with this. You can even use Options 
// (options => the ?blah=blah things added after the map name when launching a server or in the map list)
//to add even more variety. See the ParseOption function in Src\Engine\Classes\GameInfo.uc
var config array<GameTypePrefix>	SDKPrefixes;

var float ScaleFactorPerKill;

static event class<GameInfo> SetGameType(string MapName, string Options, string Portal)
{
	local string ThisMapPrefix;
	local int i,pos;
	local class<GameInfo> NewGameType;
	
	LogAlwaysInternal("SetGameType is being called on"@default.Class);
	
	MapName = StripPlayOnPrefix( MapName );

	// replace self with appropriate gametype if no game specified
	pos = InStr(MapName,"-");
	ThisMapPrefix = left(MapName,pos);
	
	for (i = 0; i < default.SDKPrefixes.length; i++)
	{
		if (default.SDKPrefixes[i].Prefix ~= ThisMapPrefix)
		{
			NewGameType = class<GameInfo>(DynamicLoadObject(default.SDKPrefixes[i].GameType,class'Class'));
			if ( NewGameType != None )
			{
				return NewGameType;
			}
		}
	}
	
	return super.SetGameType(MapName, Options, Portal);
}

/*function PostBeginPlay()
{
	local WaterVolume WV;
	
	super.PostBeginPlay();
	
	foreach AllActors(class'WaterVolume',WV)
    {
        WV.bWaterVolume = false;
    }
}*/

function ScoreKill(Controller Killer, Controller Other)
{
	local `{GAMEMODE}Pawn GSP;
	`if(`isdefined(GS_FFA))
		local int NewHighScore;
	`endif
	local bool bTeamKill;

	`if(`isdefined(GS_FFA))
		bTeamKill = false;
	`else
		bTeamKill = Killer.PlayerReplicationInfo.Team == Other.PlayerReplicationInfo.Team;
	`endif
	
	if(!bTeamKill)
	{
		GSP = `{GAMEMODE}Pawn(Killer.Pawn);
		
		if(GSP != none)
		{
			GSP.SetGiantScale(GSP.GiantScale * ScaleFactorPerKill);
		}
	}
	
	`if(`isdefined(GS_FFA))
		AOCPRI(Killer.PlayerReplicationInfo).Score = Max(Round(GSP.GiantScale*100), AOCPRI(Killer.PlayerReplicationInfo).Score);
		AOCPRI(Killer.PlayerReplicationInfo).NumKills += 1;
		Killer.PlayerReplicationInfo.bForceNetUpdate = TRUE;

		if (!isFirstBlood)
		{
			isFirstBlood = true;
			BroadcastSystemMessage(3,class'AOCSystemMessages'.static.CreateLocalizationdata("INVALIDDATA",  Killer.PlayerReplicationInfo.PlayerName, ""), 
				class'AOCSystemMessages'.static.CreateLocalizationdata("INVALIDDATA", Other.PlayerReplicationInfo.PlayerName, ""), EFAC_ALL);
		}
		
		// After 2 minutes - Start displaying taking the lead messages
		if (RoundTime * 60 - TimeLeft > 120)
		{
			NewHighScore = Max(CurHighestScore, AOCPRI(Killer.PlayerReplicationInfo).Score);
			if (NewHighScore > CurHighestScore)
			{
				if (PrevHigh == none || PrevHigh != Killer.PlayerReplicationInfo)
				{
					PrevHigh = Killer.PlayerReplicationInfo;
					BroadcastSystemMessage(4, class'AOCSystemMessages'.static.CreateLocalizationdata("INVALIDDATA",  Killer.PlayerReplicationInfo.PlayerName,""),,EFAC_ALL);
				}
			}
			CurHighestScore = NewHighScore;
		}

		// check score again to see if team won
		if ( (Killer != None) && bScoreTeamKills )
			CheckScore(Killer.PlayerReplicationInfo);
	`else
		super.ScoreKill(Killer, Other);
	`endif
}

DefaultProperties
{
    PlayerControllerClass=class'`{GAMEMODE}PlayerController'
    DefaultPawnClass=class'`{GAMEMODE}Pawn'
	
	//This is the name that shows in the server browser for this mod:
	ModDisplayString="Giant Slayers v1.1"
	
	//SPAWN FASTER
	SpawnWaveInterval=1
	MinimumRespawnTime=0
	
	//Scale up 15% for every kill
	ScaleFactorPerKill = 1.15
}